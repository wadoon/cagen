MODULE main 
IVAR 
    sub__tick : boolean;
    sub__cnt : signed word[32];
    parent__y : signed word[32];

VAR
  parent : Interval(
        
        sub__cnt );
  
  sub : UpDown(
    sub__tick,
    sub__cnt );
 
INVARSPEC parent.ASSUMPTION -> sub.ASSUMPTION;
INVARSPEC sub.GUARANTEE -> parent.GUARANTEE;
----
    MODULE UpDown(
-- INPUTS
tick,
-- OUTPUTS
cnt
)
---- GLOBALS
DEFINE

----
    VAR
    uP:boolean;
DOWN:boolean;
    _error_:boolean;
    _final_:boolean;
    _assume_:boolean;

                VAR h_cnt : History_int_1(cnt);
            DEFINE
            h_cnt_0 := h_cnt._0;
h_cnt_1 := h_cnt._1;

    DEFINE
    -- at least we have one follow-up state 
    STATE_IN_NEXT := ( next(uP) | next(DOWN) );
    pre_contract_trans_uP_uP_1 :=  tick;
post_contract_trans_uP_uP_1 := -0sd32_128 < cnt & h_cnt_1 < cnt & cnt < 0sd32_128;
contract_trans_uP_uP_1 := pre_contract_trans_uP_uP_1 & post_contract_trans_uP_uP_1;

pre_contract_trans_uP_uP_2 := ! tick;
post_contract_trans_uP_uP_2 := h_cnt_1 = cnt;
contract_trans_uP_uP_2 := pre_contract_trans_uP_uP_2 & post_contract_trans_uP_uP_2;

pre_contract_trans_DOWN_DOWN_3 :=  tick;
post_contract_trans_DOWN_DOWN_3 := h_cnt_1 > cnt & cnt > -0sd32_128;
contract_trans_DOWN_DOWN_3 := pre_contract_trans_DOWN_DOWN_3 & post_contract_trans_DOWN_DOWN_3;

pre_contract_trans_DOWN_DOWN_4 := ! tick;
post_contract_trans_DOWN_DOWN_4 := h_cnt_1 = cnt;
contract_trans_DOWN_DOWN_4 := pre_contract_trans_DOWN_DOWN_4 & post_contract_trans_DOWN_DOWN_4;

pre_contract_trans_uP_DOWN_5 := tick;
post_contract_trans_uP_DOWN_5 := cnt = 0sd32_128;
contract_trans_uP_DOWN_5 := pre_contract_trans_uP_DOWN_5 & post_contract_trans_uP_DOWN_5;

pre_contract_trans_DOWN_uP_6 := tick;
post_contract_trans_DOWN_uP_6 := cnt =-0sd32_128;
contract_trans_DOWN_uP_6 := pre_contract_trans_DOWN_uP_6 & post_contract_trans_DOWN_uP_6;

    t_12 := uP & contract_trans_uP_uP_1;
t_13 := uP & contract_trans_uP_uP_2;
t_15 := DOWN & contract_trans_DOWN_DOWN_3;
t_16 := DOWN & contract_trans_DOWN_DOWN_4;
t_18 := uP & contract_trans_uP_DOWN_5;
t_19 := DOWN & contract_trans_DOWN_uP_6;
    VALID_PRE_COND := (uP & pre_contract_trans_uP_uP_1) | (uP & pre_contract_trans_uP_uP_2) | (DOWN & pre_contract_trans_DOWN_DOWN_3) | (DOWN & pre_contract_trans_DOWN_DOWN_4) | (uP & pre_contract_trans_uP_DOWN_5) | (DOWN & pre_contract_trans_DOWN_uP_6);
    VALID_POST_COND := (uP & post_contract_trans_uP_uP_1) | (uP & post_contract_trans_uP_uP_2) | (DOWN & post_contract_trans_DOWN_DOWN_3) | (DOWN & post_contract_trans_DOWN_DOWN_4) | (uP & post_contract_trans_uP_DOWN_5) | (DOWN & post_contract_trans_DOWN_uP_6);
    
    ASSUMPTION := !next(_assume_);
    GUARANTEE := !next(_error_);
    
    ASSIGN

    init(uP) := TRUE;
init(DOWN) := FALSE;
    next(uP) := t_12 | t_13 | t_19;
next(DOWN) := t_15 | t_16 | t_18;
            
    init(_error_) := FALSE;
    next(_error_) := _error_ | -- either there was already an error condition 
                        ( ! STATE_IN_NEXT -- not activate state 
                        & VALID_PRE_COND) ; -- and the reason is a post-condition violation (there exists a valid pre-condition)

    init(_final_) := FALSE;
    next(_final_) := FALSE;

    init(_assume_) := FALSE;
    next(_assume_) := _assume_ | (! STATE_IN_NEXT  & ! VALID_PRE_COND & !_error_); -- and the reason is all pre-condition will be violated
----
    MODULE Interval(
-- INPUTS

-- OUTPUTS
y
)
---- GLOBALS
DEFINE

----
    VAR
    a:boolean;
    _error_:boolean;
    _final_:boolean;
    _assume_:boolean;

    

    DEFINE
    -- at least we have one follow-up state 
    STATE_IN_NEXT := ( next(a) );
    pre_contract_trans_a_a_0 := TRUE;
post_contract_trans_a_a_0 := -0sd32_128 <= y & y <= 0sd32_128;
contract_trans_a_a_0 := pre_contract_trans_a_a_0 & post_contract_trans_a_a_0;

    t_3 := a & contract_trans_a_a_0;
    VALID_PRE_COND := (a & pre_contract_trans_a_a_0);
    VALID_POST_COND := (a & post_contract_trans_a_a_0);
    
    ASSUMPTION := !next(_assume_);
    GUARANTEE := !next(_error_);
    
    ASSIGN

    init(a) := TRUE;
    next(a) := t_3;
            
    init(_error_) := FALSE;
    next(_error_) := _error_ | -- either there was already an error condition 
                        ( ! STATE_IN_NEXT -- not activate state 
                        & VALID_PRE_COND) ; -- and the reason is a post-condition violation (there exists a valid pre-condition)

    init(_final_) := FALSE;
    next(_final_) := FALSE;

    init(_assume_) := FALSE;
    next(_assume_) := _assume_ | (! STATE_IN_NEXT  & ! VALID_PRE_COND & !_error_); -- and the reason is all pre-condition will be violated
----
            MODULE History_int_1(input) 
            VAR _1 : signed word[32];
            DEFINE _0 := input;
            ASSIGN
            init(_1) := 0sd32_0;
next(_1) := _0;